package wci.backend.interpreter;

import wci.backend.Backend;
import wci.backend.interpreter.executors.StatementExecutor;
import wci.intermediate.ICode;
import wci.intermediate.ICodeNode;
import wci.intermediate.SymTab;
import wci.intermediate.SymTabStack;
import wci.message.Message;
import wci.message.MessageType;

public  class Executor extends Backend {
    protected static int executionCount;
    protected static RuntimeErrorHandler errorHandler;
    static {
        executionCount = 0;
        errorHandler = new RuntimeErrorHandler();
    }

    /**
     * Constructor.
     */
    public Executor(){}
    /**
     * Constructor for subclasses.
     * @param parent the parent executor
     */
    public Executor(Executor parent){
        super();
    }
    /**
     * Process the intermediate code and the symbol table generated by the parser to execute the source program
     * @param iCode the intermediate code
     * @param symTabStack the symbol table stack
     * @throws Exception if an error occurred
     */
    @Override
    public void process(ICode iCode, SymTabStack symTabStack) throws Exception {
        this.symTabStack = symTabStack ;
        this.iCode = iCode;

        long startTime = System.currentTimeMillis();

        //Get the root node of the intermediate code and execute.
        ICodeNode rootNode = iCode.getRoot();
        StatementExecutor statementExecutor = new StatementExecutor(this);
        statementExecutor.execute(rootNode);

        float elapsedTime = (System.currentTimeMillis() - startTime)/1000f;
        int runtimeErrors = errorHandler.getErrorCount();

        //Send the interpreter summary message
        sendMessage(new Message(MessageType.INTERPRETER_SUMMARY,new Number[]{executionCount,runtimeErrors,elapsedTime}));
    }
}
